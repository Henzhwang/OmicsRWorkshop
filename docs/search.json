[{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://henzhwang.github.io/Intro/articles/Module1.html","id":"packages-in-r","dir":"Articles","previous_headings":"","what":"Packages in R","title":"Module 1 Introduction to R","text":"Bye now","code":""},{"path":[]},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"the-help-function","dir":"Articles","previous_headings":"R resources","what":"The Help function","title":"Module 2 Basic of R","text":"R includes extensive facilities accessing documentation searching help. can use help() ? help operator R tp provide access documentation pages R functions, data sets, objects packages. example, want perform linear regression using lm() function, can find details function followinf commands, multiple functions names different packages, can specify desired functions,","code":"help(lm)  ## or help(\"lm\")  ?lm  ## or ?\"lm\" help(\"read_csv\", package = \"readr\")"},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"packages-in-r","dir":"Articles","previous_headings":"R resources","what":"Packages in R","title":"Module 2 Basic of R","text":"R packages collection R functions, complied code sample data stored directory called library R environment. 19351 available packages R package CRAN, can also install packages indiviual github page, open source software project Bioconductor. useful packages dplyr, tidyverse, readr etc. manipulate perform data analysis R, can install following command, installation packages, can call package using lib() “activate” package R environment, Instead “activating” whole package, can also “active” function specified package,","code":"install.packages(\"dplyr\") install.packages(\"tidyverse\") install.packages(\"readr\") help(package = \"dplyr\") library(dplyr) library(tidyverse) library(readr) dplyr::across() readr::read_csv()"},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"resources-and-viewing-documentation","dir":"Articles","previous_headings":"R resources","what":"Resources and viewing documentation","title":"Module 2 Basic of R","text":"many online resources introductory advance book R, specified tools Shiny app, workflow specified analysis. resources, Introduction Data Exploration Analysis R R Data Science Advanced R RMarkdown Visualization imaging cytometry data R","code":""},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"exploration-of-rstudio","dir":"Articles","previous_headings":"","what":"Exploration of RStudio","title":"Module 2 Basic of R","text":"Console Environment Layout RStudio Settings RMarkdown","code":""},{"path":[]},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"basic-arithmetic-operations","dir":"Articles","previous_headings":"R basics","what":"Basic arithmetic operations","title":"Module 2 Basic of R","text":"want perform basic arithmetic operations R, Operator symbol tells perform different operations operands. Addition (+) - Subtraction (-) - Multiplication (*) - Division (/) - Exponent (^) expression exponent \\(x^y\\) \\(x, y\\) integer. - Modulus(%%) Performing modulus R two numbers give remainder division. - Integer Division (%/%)","code":"4 + 5 #> [1] 9 1345 + 5465 #> [1] 6810 7 - 14 #> [1] -7 678 - 435 #> [1] 243 5 * 6 #> [1] 30 452 * 3 #> [1] 1356 5 / 3 #> [1] 1.666667 2890 /76 #> [1] 38.02632 2 ^ 2 #> [1] 4 11 ^ 3 #> [1] 1331 5 / 3 #> [1] 1.666667 5 %% 3 #> [1] 2  2890 / 75 #> [1] 38.53333 2890 %% 75 #> [1] 40 2890 - 75 * 38 #> [1] 40 5 %/% 3 #> [1] 1 2890 %/% 75 #> [1] 38"},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"relation-operations","dir":"Articles","previous_headings":"R basics > Basic arithmetic operations","what":"Relation operations","title":"Module 2 Basic of R","text":"uses relational operator compare values, \\(<\\) Less \\(>\\) Greater \\(<=\\) Less equal \\(>=\\) Greater equal \\(==\\) Equal \\(!=\\) equal ","code":"# Assign variables x <- 54 y <- 67  # less than x < y #> [1] TRUE  # greater than x > y #> [1] FALSE  # less than or equal to x <= y #> [1] TRUE  # greater than or equal to x >= y #> [1] FALSE  # equal to x == y  #> [1] FALSE  # not equal to x != y #> [1] TRUE"},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"variable-assignment","dir":"Articles","previous_headings":"R basics","what":"Variable assignment","title":"Module 2 Basic of R","text":"always want assignment value(5, “Hooray”, TRUE, etc.) variable, simplifies workflow. variable value can always change, passes program Variables programming usually used store information referenced used programs. information value can change anytime, passes program depending need conditions. R, use <- = assign value variable consist two parts, name variable value information assign variable (5, “Hooray”, TRUE example, want assign variable store information intensities CD43 marker, value intensities wrongly inputted, changes, can can assign multiple variables contains internsities different marker.","code":"# initial assignment CD43_intensities <- 0.00312343 CD43_intensities #> [1] 0.00312343 CD43_intensities <- 0.006542345 CD43_intensities #> [1] 0.006542345 Ki67_intensities <- 0.005342 CD16_intensities <- 0.003423  print(paste(\"The intensity for Ki67 is\", Ki67_intensities, \"and the intensity for CD16 is\", CD16_intensities, \".\")) #> [1] \"The intensity for Ki67 is 0.005342 and the intensity for CD16 is 0.003423 .\""},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"basic-data-types","dir":"Articles","previous_headings":"R basics","what":"Basic data types","title":"Module 2 Basic of R","text":"servval different data types R help us manipulating data. important understand data type reduce workflow stress frustration beginning. first thing keep mind everything R object, need detect variable data type hand. command class() can used identify data type data structure variable. Basic data types: numeric – real numbers without decimal values (ie., 4, 67, 78.453, 0.0653) - Integer – specifies real values without decimal points, suffix L used specify integer data - character – specify character string values variable, can use either single quotes ' ' double quotes \" \". example, \"c\", \"y\", \"t\" consider single character \"cytometry\", \"omics\", \"R workshop\" consider string. - logical – also known Boolean data type. two values, TRUE FALSE. can also represent using alternative value T F.","code":"CD16_intensities #> [1] 0.003423 class(CD16_intensities) #> [1] \"numeric\" # numeric CD11b_intensities <- 11 class(CD11b_intensities) #> [1] \"numeric\"  # integer CD11b_intensities <- 11L class(CD11b_intensities) #> [1] \"integer\" # character variable character_defined <- \"c\" class(character_defined) #> [1] \"character\"  # string variable string_defined <- \"R workshop\" class(string_defined) #> [1] \"character\" # Boolean data type bool_true <- TRUE class(bool_true) #> [1] \"logical\"  bool_false <- FALSE class(bool_false) #> [1] \"logical\" bool_t <- T bool_t == bool_true #> [1] TRUE  bool_f <- F bool_f == bool_false #> [1] TRUE"},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"factor","dir":"Articles","previous_headings":"R basics > Basic data types","what":"Factor","title":"Module 2 Basic of R","text":"One important use attributes use factors R. Factors used work categorical variables variables fixed known set possible values. behave differently regular integer vectors character vectors, vectors can convert factors using factor() command R packages. instance, can also check number values factor class","code":"letter_avec <- c(\"a\", \"a\", \"b\", \"c\", \"b\") letter_avec #> [1] \"a\" \"a\" \"b\" \"c\" \"b\"  letter_avec_factor <- factor(letter_avec) letter_avec_factor #> [1] a a b c b #> Levels: a b c  class(letter_avec_factor) #> [1] \"factor\" table(letter_avec_factor) #> letter_avec_factor #> a b c  #> 2 2 1"},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"basic-data-structures","dir":"Articles","previous_headings":"R basics","what":"Basic data structures","title":"Module 2 Basic of R","text":"far, talked case variable contains single value like introduce data structures allow storing multiple, multi-type value R. five data structures often used data analysis, Advanced R, Wickham summaries dimensionality values types data structures,","code":""},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"atomic-vector","dir":"Articles","previous_headings":"R basics > Basic data structures","what":"Atomic vector","title":"Module 2 Basic of R","text":"Atomic vector often created using c(), short combine. Atomic vector often created using command c() short combine, separte element ,. elements vector type. cam also create atomic vector variables.","code":"# numeric atomic vector num_avec <- c(1, 2, 4.5, 75)  # integer atomic vector int_avec <- c(1L, 4L, 100L)  # character atomic vector chr_avec <- c(\"Omics\", \"Flow Cytometry\", \"R\", \"Workshop\")  # logical atomic vector log_avec <- c(TRUE, FALSE, T, F) intensities_avec <- c(CD43_intensities, CD11b_intensities, CD16_intensities) intensities_avec #> [1]  0.006542345 11.000000000  0.003423000  class(intensities_avec) #> [1] \"numeric\""},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"lists","dir":"Articles","previous_headings":"R basics > Basic data structures","what":"Lists","title":"Module 2 Basic of R","text":"List different atomic vectors heterogeneous (can contain elements different arbitrary data types), can constructed using command list(). List can also contain list ! ’s mean can create list list.","code":"# creating lists arb_list <- list(1, 3, \"Workshop\", TRUE, \"omics\") arb_list2 <- list(\"Tomorrow\", \"is\", \"finally\", \"Friday\") arb_list #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] \"Workshop\" #>  #> [[4]] #> [1] TRUE #>  #> [[5]] #> [1] \"omics\"  class(arb_list) #> [1] \"list\" comb_list <- list(arb_list, arb_list2) comb_list #> [[1]] #> [[1]][[1]] #> [1] 1 #>  #> [[1]][[2]] #> [1] 3 #>  #> [[1]][[3]] #> [1] \"Workshop\" #>  #> [[1]][[4]] #> [1] TRUE #>  #> [[1]][[5]] #> [1] \"omics\" #>  #>  #> [[2]] #> [[2]][[1]] #> [1] \"Tomorrow\" #>  #> [[2]][[2]] #> [1] \"is\" #>  #> [[2]][[3]] #> [1] \"finally\" #>  #> [[2]][[4]] #> [1] \"Friday\""},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"matrix","dir":"Articles","previous_headings":"R basics > Basic data structures","what":"Matrix","title":"Module 2 Basic of R","text":"Matrix can consider special case array two dimensions, shape rectangular (square). can created using commands matrix() array().","code":"# create matrix using matrix() mat1 <- matrix(data = 1:6, nrow = 2, ncol = 3, byrow = FALSE, dimnames = NULL) mat1  #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6  mat2 <- matrix(data = c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3) mat2 #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6  # examine if mat2 is identical all.equal(mat1, mat2) #> [1] TRUE  class(mat1) #> [1] \"matrix\" \"array\" # create matrix using array() mat3 <- array(data = 1:6, dim = c(2, 3), dimnames = NULL) mat3 #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6  # examine if mat1 is identical all.equal(mat1, mat3) #> [1] TRUE"},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"data-frames","dir":"Articles","previous_headings":"R basics > Basic data structures","what":"Data frames","title":"Module 2 Basic of R","text":"Data frames commonly way storing data R make data analysis easier. 2-dimensional structure list equal-length vectors shares properties matrix list. can create data frame using base function data.frame(), commands R packages. can also create data frame using lists unlist().","code":"df_1 <- data.frame(x = 1:3, y = c(\"a\", \"b\", \"c\")) df_1 #>   x y #> 1 1 a #> 2 2 b #> 3 3 c  class(df_1) #> [1] \"data.frame\" # create lists df_list <- c(1:3) df_list2 <- c(\"a\", \"a\", \"b\") df_list3 <- c(TRUE, TRUE, FALSE)  # create data frame df_2 <- data.frame(value = unlist(df_list),                     chara = unlist(df_list2),                    logic = unlist(df_list3)) df_2 #>   value chara logic #> 1     1     a  TRUE #> 2     2     a  TRUE #> 3     3     b FALSE"},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"array","dir":"Articles","previous_headings":"R basics > Basic data structures","what":"Array","title":"Module 2 Basic of R","text":"Array R data objects can store data two dimensions. less commonly use, definitely worth learning might useful. Let’s say want create array store multiple matrices. know dimension matrix \\(2 \\times 2\\), storing multiple matrices make array three dimensions. first want create matrices. want store matricies array","code":"mat_1 <- matrix(data = 1:6, nrow = 2, ncol = 3, byrow = FALSE) mat_2 <- matrix(data = 1:6, nrow = 2, ncol = 3, byrow = TRUE) mat_3 <- matrix(data = 12:17, nrow = 2, ncol = 3, byrow = FALSE) mat_array <- array(data = c(mat_1, mat_2, mat_3),                    dim = c(2, 3, 3)) dimnames(mat_array)[[3]] <- list(\"Matrix 1\", \"Matrix 2\", \"Matrix 3\") mat_array #> , , Matrix 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6 #>  #> , , Matrix 2 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    4    5    6 #>  #> , , Matrix 3 #>  #>      [,1] [,2] [,3] #> [1,]   12   14   16 #> [2,]   13   15   17  class(mat_array) #> [1] \"array\""},{"path":"https://henzhwang.github.io/Intro/articles/Module2.html","id":"identify-data-types","dir":"Articles","previous_headings":"R basics","what":"Identify data types","title":"Module 2 Basic of R","text":"many cases, might unsure data type data structure R object. R, can use following command determine identify data types data structure data class() – return values class attributes typeof() – determines internal type storage mode object value class attributes object might internal type object.   - Data type .numeric(x) – return TRUE x numeric type FALSE otherwise .double(), .integer(), .double(), .character(), .logical(), .factor() performed similar functionality   - Data_structure .atomic(x) – return TRUE x atomic type FALSE otherwise .list(), .matrix(), .data.frame(), .array() performed similar functionality","code":"# num_avec # c(1.0  2.0  4.5 75.0) class(num_avec) #> [1] \"numeric\" typeof(num_avec) #> [1] \"double\" #int_avec # c(1  4 100) class(int_avec) #> [1] \"integer\" typeof(int_avec) #> [1] \"integer\" class(df_1) #> [1] \"data.frame\" typeof(df_1) #> [1] \"list\" class(mat_array) #> [1] \"array\" typeof(mat_array) #> [1] \"integer\""},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"quick-recap","dir":"Articles","previous_headings":"","what":"Quick Recap","title":"Module 3 Constructing Workflow","text":"Last workshop: help() function R viewing documentation R thousands packages online resources Exploration Rstudio Rmarkdown () means passing desired function arguments eg. list(x) passing list function argument \\(x\\) Basic Operations (Addition, Subtraction, Multiplication, Division, Modulus, Integer Division) Relation Operations (<, >, <=, >=, ==, !=) Basic Data Types: numeric: 1, 12, 5.6, 7.8 Integer: 1L, 12L, 50L character: “Omics”, “Intro”, “R Workshop”, “!” logical: TRUE, FALSE, T, F factor: Convert fixed known set possible values categorical variables Variable assignment using <- = eg. variable_name <- assign_value Basic Data Structure: Dimensions Homogeneous (contents must type) Heterogeneous (contents can different types) 1 dimension Atomic vector List 2 dimensions Matrix Data frame, (tibble) n dimensions Array","code":""},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"subsetting","dir":"Articles","previous_headings":"Quick Recap","what":"Subsetting","title":"Module 3 Constructing Workflow","text":"given R data object contains multiple values multiple variables, many times want investigate subset data. can use indexing features R can used select exclude variables observations. One easiest way use [ ] indexing features, sometimes [[ ]]. index can either index value values interested, names columns rows. Notice index starts 1 R. instance, Try matrices data types !","code":"# atomic vector and list letter_avec <- c(\"a\", \"a\", \"b\", \"c\", \"b\")  letter_avec[1]      ## first value in the atomic vector  #> [1] \"a\" letter_avec[2:5]    ## second to fifth value in the atomic vector #> [1] \"a\" \"b\" \"c\" \"b\" letter_avec[-3]     ## exclude the second values in the atomic vector #> [1] \"a\" \"a\" \"c\" \"b\""},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"data-frame","dir":"Articles","previous_headings":"Quick Recap > Subsetting","what":"Data frame","title":"Module 3 Constructing Workflow","text":"case data frame, can use subset method slightly different way, want values column dataframe, let’s say want value y df_1, can obtain results using $, convenient way subset column data frame R. difference using [ ] , [[ ]], $ subset using [ ] returns data frame, [[ ]], $ returns atomic like vector. , want second value y df_1, hand, can also subset dataframe rows rows columns. dimension dataframe form rows columns, thus, can subset rows using row index [row_index, ]. can also subset desired row indies column indies,","code":"df_1 <- data.frame(x = 1:3, y = c(\"a\", \"b\", \"c\"))  # subset using index value df_1[1] #>   x #> 1 1 #> 2 2 #> 3 3  # subset using column name df_1[\"x\"] #>   x #> 1 1 #> 2 2 #> 3 3 df_1[[\"y\"]] # or df_1[[2]] #> [1] \"a\" \"b\" \"c\" df_1$y #> [1] \"a\" \"b\" \"c\" df_1[[2]][2] #> [1] \"b\"  val <- df_1$y val[2] #> [1] \"b\" # subset by rows df_1[1, ] #>   x y #> 1 1 a # create a 3D dataframe df_3d <- data.frame(x = 1:5, y = 6:10, z = 11:15) # dim: 5*3  # find dimension of dataframe dim(df_3d) #> [1] 5 3  # subset row 2 to 5 in column 2 and 3 df_3d[2:5, 2:3] #>    y  z #> 2  7 12 #> 3  8 13 #> 4  9 14 #> 5 10 15"},{"path":[]},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"setting-up-working-directory","dir":"Articles","previous_headings":"Construct a workflow","what":"Setting up working directory","title":"Module 3 Constructing Workflow","text":"working directory default location R look files want load put files save. initial (default) working directory save RMarkdown files R scipt files. can check current working directory RMarkdown, indicates R recognize read files store Desktop (files working directory), recognized files directory. best way store RMarkdown file within working directory data want import save. ’s case, can set working directory deisred files locations using setwd().","code":"getwd() #> [1] \"/Users/henzhwang/Desktop/OmicsRWorkshop/vignettes\" setwd(\"/Users/henzhwang/Desktop/OmicsRWorkshop\")"},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"reading-csv-files","dir":"Articles","previous_headings":"Construct a workflow","what":"Reading csv files","title":"Module 3 Constructing Workflow","text":"many cases, want perform data analysis external data different format. want focus reading csv file, can use base::read.csv() read csv file R. file current working directory, can also exectute following,","code":"csv_file <- read.csv( , header = TRUE) # csv_file <- readr::read_csv() csv_file <- read.csv()"},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"data-exploration","dir":"Articles","previous_headings":"Construct a workflow","what":"Data Exploration","title":"Module 3 Constructing Workflow","text":"now want perform basic operations dataset R. want first try performing opertations World’s famous, build-dataset iris R. can assign build-dataset variable, inspect dataset (assign variable exists gloabl environment, easier manipulate assignment). information iris dataset can viewed ??iris. dataset larger, interest data two ends, can use head() tail() command R. number 5 indicates number rows display, default 6.","code":"Iris <- readr::read_builtin(\"iris\") #Iris <- iris head(Iris) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa head(Iris, 5) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa tail(Iris, 5) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 146          6.7         3.0          5.2         2.3 virginica #> 147          6.3         2.5          5.0         1.9 virginica #> 148          6.5         3.0          5.2         2.0 virginica #> 149          6.2         3.4          5.4         2.3 virginica #> 150          5.9         3.0          5.1         1.8 virginica"},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"descriptive-analysis","dir":"Articles","previous_headings":"Construct a workflow","what":"Descriptive Analysis","title":"Module 3 Constructing Workflow","text":"next step always good inspect data types features dataset, can use str(). notice Sepal.length, Sepal.Width, Petal.Length, Petal.Width numeric values, Species factor column.  can also inspect number species factor level,  might also interested range variable.  However, three functions limited data types applied variable. instance, encounter errors, don’t panic error message make sense. One useful way copy whole error message search Google, make use ChatGPT (careful sometimes ChatGPT make sense!)  convenience, can use single command summary() compute descriptive statistics dataset  can also summary dataset species using (),","code":"str(Iris) #> 'data.frame':    150 obs. of  5 variables: #>  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... table(Iris$Species) #>  #>     setosa versicolor  virginica  #>         50         50         50 sepal_length <- Iris$Sepal.Length min(sepal_length)   ## minimum value #> [1] 4.3 max(sepal_length)   ## maximum value #> [1] 7.9 range(sepal_length) ## vector contains min and max values #> [1] 4.3 7.9  # range of the variable range(sepal_length)[2] - range(sepal_length)[1] #> [1] 3.6 min(Iris$Species) #> Error in Summary.factor(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, : 'min' not meaningful for factors range(Iris$Species) #> Error in Summary.factor(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, : 'range' not meaningful for factors summary(Iris) #>   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    #>  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100   #>  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300   #>  Median :5.800   Median :3.000   Median :4.350   Median :1.300   #>  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199   #>  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800   #>  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500   #>        Species   #>  setosa    :50   #>  versicolor:50   #>  virginica :50   #>                  #>                  #> by(data = Iris, INDICES = Iris$Species, FUN = summary) #> Iris$Species: setosa #>   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    #>  Min.   :4.300   Min.   :2.300   Min.   :1.000   Min.   :0.100   #>  1st Qu.:4.800   1st Qu.:3.200   1st Qu.:1.400   1st Qu.:0.200   #>  Median :5.000   Median :3.400   Median :1.500   Median :0.200   #>  Mean   :5.006   Mean   :3.428   Mean   :1.462   Mean   :0.246   #>  3rd Qu.:5.200   3rd Qu.:3.675   3rd Qu.:1.575   3rd Qu.:0.300   #>  Max.   :5.800   Max.   :4.400   Max.   :1.900   Max.   :0.600   #>        Species   #>  setosa    :50   #>  versicolor: 0   #>  virginica : 0   #>                  #>                  #>                  #> ------------------------------------------------------------  #> Iris$Species: versicolor #>   Sepal.Length    Sepal.Width     Petal.Length   Petal.Width          Species   #>  Min.   :4.900   Min.   :2.000   Min.   :3.00   Min.   :1.000   setosa    : 0   #>  1st Qu.:5.600   1st Qu.:2.525   1st Qu.:4.00   1st Qu.:1.200   versicolor:50   #>  Median :5.900   Median :2.800   Median :4.35   Median :1.300   virginica : 0   #>  Mean   :5.936   Mean   :2.770   Mean   :4.26   Mean   :1.326                   #>  3rd Qu.:6.300   3rd Qu.:3.000   3rd Qu.:4.60   3rd Qu.:1.500                   #>  Max.   :7.000   Max.   :3.400   Max.   :5.10   Max.   :1.800                   #> ------------------------------------------------------------  #> Iris$Species: virginica #>   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    #>  Min.   :4.900   Min.   :2.200   Min.   :4.500   Min.   :1.400   #>  1st Qu.:6.225   1st Qu.:2.800   1st Qu.:5.100   1st Qu.:1.800   #>  Median :6.500   Median :3.000   Median :5.550   Median :2.000   #>  Mean   :6.588   Mean   :2.974   Mean   :5.552   Mean   :2.026   #>  3rd Qu.:6.900   3rd Qu.:3.175   3rd Qu.:5.875   3rd Qu.:2.300   #>  Max.   :7.900   Max.   :3.800   Max.   :6.900   Max.   :2.500   #>        Species   #>  setosa    : 0   #>  versicolor: 0   #>  virginica :50   #>                  #>                  #>"},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"data-distribution","dir":"Articles","previous_headings":"Construct a workflow","what":"Data distribution","title":"Module 3 Constructing Workflow","text":"examining distribution quantitative variable, describe overall pattern data (shape, center, spread), deviations pattern (outliers). useful metrics determine overall pattern: Mean: Average value quantitative variable Median: middle number ordered quantitative variable Mode: frequent number quantitative variable Standard Deviation: Measure dispersed data relation mean Variance: Measure dispersion takes account spread data points data set can easily compute metrics R,  can also visualize data distribution Sepal.Length iris dataset using histogram, histogram approximate representation distribution numerical data.  can also visualize Sepal.Length variable species using dot plot. dot plot uses observations points, help visualize shape spread data, comparing frequency distributions. want use ggplot2,  Another useful plot scatter plot. scatter plot allow check whether potential link two quantitative variables, useful visualizing potential correlation variables. want investigate correlation Petal.Length Petal.Width, thus draw,   can also investigate correlation Petal.Length Petal.Width different species, use ggplot2,","code":"mean(sepal_length) #mean #> [1] 5.843333 sd(sepal_length)   #standard deviation #> [1] 0.8280661 var(sepal_length)  #variance #> [1] 0.6856935 # creating histogram hist(sepal_length, breaks = 30,      xlim = c(4, 8),      xlab = \"Sepal Length\") library(ggplot2)  # dot plots using ggplot2 ggplot(Iris) +   aes(x = Species, y = Sepal.Length) +   geom_dotplot(binaxis = \"y\", stackdir = \"center\") # create scatter plot with base plot plot(Iris$Petal.Length, Iris$Petal.Width, type = \"p\") ggplot(Iris) +   aes(x = Petal.Length, y = Petal.Width, colour = Species) +   geom_point()"},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"scaling","dir":"Articles","previous_headings":"Construct a workflow","what":"Scaling","title":"Module 3 Constructing Workflow","text":"Scaling mathematical process used transform numerical values common scale. allows fair comparison variables different units ranges values, involves changing size shape maintaining proportions. important note mathematical statistical algorithms, Principal Components Analysis (PCA), sensitive scale dataset. cases, necessary scale dataset applying algorithm ensure results biased towards variables larger ranges values. Failure scale dataset can result inaccurate misleading results, making scaling essential step data analysis.","code":"# perform scaling Iris_scaled <- Iris Iris_scaled[1:4] <- scale(Iris[1:4]) head(Iris_scaled[1:4]) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1   -0.8976739  1.01560199    -1.335752   -1.311052 #> 2   -1.1392005 -0.13153881    -1.335752   -1.311052 #> 3   -1.3807271  0.32731751    -1.392399   -1.311052 #> 4   -1.5014904  0.09788935    -1.279104   -1.311052 #> 5   -1.0184372  1.24503015    -1.335752   -1.311052 #> 6   -0.5353840  1.93331463    -1.165809   -1.048667  # summary statistic summary(Iris_scaled) #>   Sepal.Length       Sepal.Width       Petal.Length      Petal.Width      #>  Min.   :-1.86378   Min.   :-2.4258   Min.   :-1.5623   Min.   :-1.4422   #>  1st Qu.:-0.89767   1st Qu.:-0.5904   1st Qu.:-1.2225   1st Qu.:-1.1799   #>  Median :-0.05233   Median :-0.1315   Median : 0.3354   Median : 0.1321   #>  Mean   : 0.00000   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.0000   #>  3rd Qu.: 0.67225   3rd Qu.: 0.5567   3rd Qu.: 0.7602   3rd Qu.: 0.7880   #>  Max.   : 2.48370   Max.   : 3.0805   Max.   : 1.7799   Max.   : 1.7064   #>        Species   #>  setosa    :50   #>  versicolor:50   #>  virginica :50   #>                  #>                  #>"},{"path":[]},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"correlation-analysis","dir":"Articles","previous_headings":"Hypothesis testing","what":"Correlation analysis","title":"Module 3 Constructing Workflow","text":"Correlation statistical measure describes strength direction relationship two variables. usually measured using correlation coefficient numerical value ranges -1 1, indicating whether two variables positively related (.e., tend increase decrease together), negatively related (.e., tend move opposite directions), related . coefficient 1 indicates perfect positive correlation, variables increase decrease together coefficient -1 indicates perfect negative correlation, one variable increases decreases coefficient 0 indicates correlation, meaning linear relationship two variables  can also make matrix plots given dataset using ggpairs GGally package allow us quickly visualize relationships multiple variables single plot.","code":"cor(Iris[1:4]) #>              Sepal.Length Sepal.Width Petal.Length Petal.Width #> Sepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411 #> Sepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259 #> Petal.Length    0.8717538  -0.4284401    1.0000000   0.9628654 #> Petal.Width     0.8179411  -0.3661259    0.9628654   1.0000000 GGally::ggpairs(data = Iris,                  columns = 1:ncol(Iris),                 mapping = ggplot2::aes(colour = Species))"},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"create-new-columns","dir":"Articles","previous_headings":"Hypothesis testing","what":"Create new columns","title":"Module 3 Constructing Workflow","text":"performing data manipulation, often necessary store manipulation results original dataset future analysis avoid creating new object. One way achieve creating new column data frame assigning manipulated values column. Similar subsetting, can done using $ operator R. Consider sepal length flower longer equal 5.843 (mean value sepal length iris dataset) “long”, “short” otherwise. want create new column Iris dataset store information whether flower “long” “short” sepal length.","code":"Iris_modi <- Iris   # not necessarily Iris_modi$long <- ifelse(test = Iris_modi$Sepal.Length < 5.843,                          yes = \"short\", no = \"yes\") typeof(Iris_modi$long) #> [1] \"character\" Iris_modi$long <- factor(Iris_modi$long) is.factor(Iris_modi$long) #> [1] TRUE"},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"write-data","dir":"Articles","previous_headings":"Hypothesis testing","what":"Write data","title":"Module 3 Constructing Workflow","text":"manipulating data, can use save() save manipulated dataset locally. save automatically current working directory, unless specified.","code":"Iris_modi <- Iris[56:78, ]  save(Iris_modi, file = \"Iris_modi.csv\") save(Iris_modi, file = \"/Users/henzhwang/Desktop/Iris_modi.csv\")"},{"path":"https://henzhwang.github.io/Intro/articles/Module3.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Module 3 Constructing Workflow","text":"Descriptive statistics R","code":""},{"path":"https://henzhwang.github.io/Intro/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Biban Gill. Author. Jamie McNicol. Author. Shiheng Huang. Author, maintainer.","code":""},{"path":"https://henzhwang.github.io/Intro/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gill B, McNicol J, Huang S (2023). OmicsRWorkshop: MIRC OMICS Introductory R Workshop. R package version 0.1.0.","code":"@Manual{,   title = {OmicsRWorkshop: MIRC OMICS Introductory to R Workshop},   author = {Biban Gill and Jamie McNicol and Shiheng Huang},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"https://henzhwang.github.io/Intro/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://henzhwang.github.io/Intro/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://henzhwang.github.io/Intro/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> [1] \"Hello, world!\""}]
